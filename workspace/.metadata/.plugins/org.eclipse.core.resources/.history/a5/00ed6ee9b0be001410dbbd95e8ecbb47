
public class Generation {
	
	Cell[][] currentGen;
	int rows;
	int columns;
	
	
	public Generation( Cell[][] input, int x, int y ) {
		
		currentGen = input;
		rows = x;
		columns = y;
//		System.out.println(currentGen[0][0]);
//		System.out.println(currentGen[0][1]);
//		System.out.println(currentGen[0][2]);
//		System.out.println(currentGen[0][3]);
//		System.out.println("");
	}
	
	private Cell getNewCell( Cell target, int rowLoc, int columnLoc) {
		
		// Clarify whether there are rows/columns adjacent
		// to target
		
		boolean left = true;
		boolean right = true;
		boolean down = true;
		boolean up = true;
		
		if ( columnLoc == 0 ) { left = false; }
		if ( columnLoc == columns - 1 ) { right = false; }
		if ( rowLoc == 0 ) { up = false; }
		if ( rowLoc == rows - 1 ) { down = false; }
		
		// Check 4 cardinal directions
		
		if ( left ) {
			if ( currentGen[rowLoc][columnLoc - 1].getLife() ) { target.neighbour(3); }
		}
		if ( right ) {
			if ( currentGen[rowLoc][columnLoc + 1].getLife() ) { target.neighbour(4); }
		}
		if ( down ) {
			if ( currentGen[rowLoc + 1][columnLoc].getLife() ) { target.neighbour(2); }
		}
		if ( up ) {
			if ( currentGen[rowLoc - 1][columnLoc].getLife() ) { target.neighbour(1); }
		}
		
		// Check 4 diagonal directions
		
		if ( up && right ) {
			if ( currentGen[columnLoc - 1][rowLoc + 1].getLife() ) { target.neighbour(5); }
		}
		if ( up && left ) {
			if ( currentGen[columnLoc - 1][rowLoc - 1].getLife() ) { target.neighbour(6); }
		}
		if ( down && right ) {
			if ( currentGen[columnLoc + 1][rowLoc + 1].getLife() ) { target.neighbour(7); }
		}
		if ( down && left ) {
			if ( currentGen[columnLoc + 1][rowLoc - 1].getLife() ) { target.neighbour(8); }
		}
		
		// Find out if cell is alive
		System.out.println("Completed.");
		boolean survival;
		survival = target.nextCell();
		
		// New cell
		
		return new Cell(survival);
		
	}
	
	public void getNextGen() {
		Cell[][] nextGen = new Cell[rows][columns];
			
		
		for ( int i = 0; i < rows; i++ ) {
			for (int j = 0; j < columns; j++) {
				System.out.format( "(%s, %s) %s ", i, j, currentGen[i][j] );
				nextGen[i][j] = getNewCell( currentGen[i][j], i, j );
			}
		}
		
		
		
		int sum = 0;
		
		for ( Cell[] item : nextGen ) {
			for ( Cell entry : item) {
				System.out.print(entry + " ");
				sum += Integer.parseInt(entry.toString());
			}System.out.println("");
		} System.out.println("");
		System.out.println(sum);
		
		
	}
	
}
