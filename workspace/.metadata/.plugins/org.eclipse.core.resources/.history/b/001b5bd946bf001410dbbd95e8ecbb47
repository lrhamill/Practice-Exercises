

public class Generation {
	
	Cell[][] currentGen;
	int rows;
	int columns;
	
	private void printGen() {
		for ( Cell[] row : currentGen ) {
			for ( Cell item : row ) {
				System.out.println( item + " ");
			} System.out.println("");
			System.out.println("");
		}
	}
	
	
	public Generation( Cell[][] input, int x, int y ) {
		
		rows = x;
		columns = y;
		// See if we need to expand 
		boolean expandUp = false;
		boolean expandDown = false;
		boolean expandLeft = false;
		boolean expandRight = false;
		
		for ( Cell item : input[0] ) {
			if ( item.getLife() ) { 
				expandUp = true; 
				rows += 1;
				break; 
				}
		}
		
		for ( Cell item : input[y-1] ) {
			if ( item.getLife() ) {
				expandDown = true;
				rows += 1;
				break; 
				}
		}
		
		for ( int i = 0; i < y; i++ ) {
			if ( input[i][0].getLife() && ! expandLeft ) {
				expandLeft = true;
				columns += 1; 
				}
			if ( input [i][x-1].getLife() && ! expandRight) {
				expandRight = true; 
				columns += 1;
				}
			if ( expandLeft && expandRight) {
				break;
			}
		}
		
		currentGen = new Cell[rows][columns];
		
		// Add a row of dead cells to the top and bottom if needed

		if ( expandUp || expandDown ) {
		
			for ( int i = 0; i < columns - 1; i++ ) {
				
				if ( expandUp ) {
					currentGen[0][i] = new Cell(false);
				}
					
				if ( expandDown ) {
					currentGen[rows - 1][i] = new Cell(false);
				}
			}
		}
		
		printGen();
		
		// Insert input into currentGen
		
		int leftOffset = 0;
		if ( expandLeft ) { leftOffset += 1; }
		int topOffset = 0;
		if ( expandUp ) { topOffset += 1; }
		
		// add rows from input
		for ( int i = 0; i < y;  i++ ) {
			for ( int j = 0; j < x; j++ ) {
				
				// Add a dead cell to the start of the row if needed
				if ( j == 0 & expandLeft ) {
					currentGen[i][0] = new Cell(false);
				}
				
				currentGen[i + topOffset][j + leftOffset] = input[i][j];
				
				// Add a dead cell to the end of the row if needed
				if ( j == y - 1 && expandRight ) {
					currentGen[i][y] = new Cell(false);
				}
			}		
		}
		
		printGen()
	}
	
	private Cell getNewCell( Cell target, int rowLoc, int columnLoc ) {
		
		// Clarify whether there are rows/columns adjacent
		// to target
		
		boolean left = true;
		boolean right = true;
		boolean down = true;
		boolean up = true;
		
		if ( columnLoc == 0 ) { left = false; }
		if ( columnLoc == columns - 1 ) { right = false; }
		if ( rowLoc == 0 ) { up = false; }
		if ( rowLoc == rows - 1 ) { down = false; }
		
		// Check 4 cardinal directions
		
		if ( left ) {
			if ( currentGen[rowLoc][columnLoc - 1].getLife() ) { target.neighbour(3); }
		}
		if ( right ) {
			if ( currentGen[rowLoc][columnLoc + 1].getLife() ) { target.neighbour(4); }
		}
		if ( down ) {
			System.out.println(rowLoc + " " + columnLoc);
			if ( currentGen[rowLoc + 1][columnLoc].getLife() ) { target.neighbour(2); }
		}
		if ( up ) {
			if ( currentGen[rowLoc - 1][columnLoc].getLife() ) { target.neighbour(1); }
		}
		
		// Check 4 diagonal directions
		
		if ( up && right ) {
			if ( currentGen[rowLoc - 1][columnLoc + 1].getLife() ) { target.neighbour(5); }
		}
		if ( up && left ) {
			if ( currentGen[rowLoc - 1][columnLoc - 1].getLife() ) { target.neighbour(6); }
		}
		if ( down && right ) {
			if ( currentGen[rowLoc + 1][columnLoc + 1].getLife() ) { target.neighbour(7); }
		}
		if ( down && left ) {
			if ( currentGen[rowLoc + 1][columnLoc - 1].getLife() ) { target.neighbour(8); }
		}
		
		// Find out if cell is alive
		boolean survival;
		survival = target.nextCell();
		
		// New cell
		
		return new Cell(survival);
		
	}
	
	public void getNextGen() {
		
		Cell[][] nextGen = new Cell[rows][columns];
			
		
		for ( int i = 0; i < rows; i++ ) {
			for (int j = 0; j < columns; j++) {
				nextGen[i][j] = getNewCell( currentGen[i][j], i, j );
			}
		}
				
		int sum = 0;
		
		System.out.println("");
		
		for ( Cell[] item : nextGen ) {
			for ( Cell entry : item) {
				System.out.print(entry + " ");
				sum += Integer.parseInt(entry.toString());
			}System.out.println("");
		}
		System.out.println("");
		System.out.println(sum);
		
		
	}
	
}
